# https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md
swagger: '2.0'
info:
  title: Pusher HTTP API
  version: "1.0.0"
  contact:
    url: https://pusher.com
    email: support@pusher.com
  description: |
    The API is hosted at http://api.pusherapp.com, and may be accessed via HTTP or HTTPS. All requests MUST be authenticated, as described below.
    
    ## Authentication
    
    Pusher uses a HMAC-based authentication. Once all the parameters have been added to the request, a signature is calculated - `auth_signature`, described below and appended to the query string.

    ### Generating authentication signatures

    The signature is a HMAC SHA256 hex digest. This is generated by signing a string made up of the following components concatenated with newline characters `\n`.

    * The uppercase request method (e.g. `POST`).
    * The request path (e.g. `/some/resource`).
    * The query parameters sorted by key, with keys converted to lowercase, then joined as in the query string.

    NOTE:
    > The string must not be url escaped (e.g. given the keys `auth_key`: `foo`, `Name`: `Something else`, you get `auth_key=foo&name=Something else`).

    See below for a worked example.

    ### Worked authentication example

    Assume that we wish to trigger the `foo` event on the `project-3` channel with JSON `{"some":"data"}` and that our app credentials are

        app_id  3
        key     278d425bdf160c739803
        secret  7ad3773142a6692b25b8

    The request url is

        http://api.pusherapp.com/apps/3/events

    Since this is a POST request, the body should contain a hash of parameters encoded as JSON where the data parameter is itself JSON encoded:

    ```json
    {"name":"foo","channels":["project-3"],"data":"{\"some\":\"data\"}"}
    ```

    Note that these parameters may be provided in the query string, although this is discouraged.

    Authentication parameters should be added (assume that these are included in the query string, so the body is unchanged from above). Since the body is non-empty a body_md5 parameter should be added

        auth_key        278d425bdf160c739803
        auth_timestamp  1353088179
        auth_version    1.0

    The signature is generated by signing the following string

        POST\n/apps/3/events\nauth_key=278d425bdf160c739803&auth_timestamp=1353088179&auth_version=1.0&body_md5=ec365a775a4cd0599faeb73354201b6f

    This should be signed by generating the HMAC SHA256 hex digest with secret key `7ad3773142a6692b25b8`. This yields the following signature

    
        da454824c97ba181a32ccc17a72625ba02771f50b50e1e7430e47a1f3f457e6c

    The API request then becomes

        POST /apps/3/events?auth_key=278d425bdf160c739803&auth_timestamp=1353088179&auth_version=1.0&body_md5=ec365a775a4cd0599faeb73354201b6f&auth_signature=da454824c97ba181a32ccc17a72625ba02771f50b50e1e7430e47a1f3f457e6c HTTP/1.1
        Content-Type: application/json

        {"name":"foo","channels":["project-3"],"data":"{\"some\":\"data\"}"}

    Or using curl:

        $ curl -H "Content-Type: application/json" -d '{"name":"foo","channels":["project-3"],"data":"{\"some\":\"data\"}"}' "http://api.pusherapp.com/apps/3/events?auth_key=278d425bdf160c739803&auth_timestamp=1353088179&auth_version=1.0&body_md5=ec365a775a4cd0599faeb73354201b6f&auth_signature=da454824c97ba181a32ccc17a72625ba02771f50b50e1e7430e47a1f3f457e6c"
        {}

    If you're having difficulty generating the correct signature in your library please take a look at this http://gist.github.com/376898[example gist].


    ## HTTP Keep-Alive
    
    The Pusher API supports [HTTP Keep-Alive](https://en.wikipedia.org/wiki/HTTP_persistent_connection). HTTP client libraries that implement this feature are able to re-use a single TCP connection to send multiple HTTP requests thus avoiding the overhead of the TCP connection (typically 100-200ms) between each subsequent request.

    In scenarios where many requests are sent at the same time this can improve the throughput and decrease the load on the machine that is sending those requests.
    
    
# array of all schemes that your API supports
schemes:
  - https
  - http

basePath: /

consumes:
  - application/json
produces:
  - application/json

x-types:
  CommonParams: &CommonParams
    - name: app_id
      in: path
      description: Application ID
      required: true
      type: string
    - name: auth_key
      in: query
      description: Application Key
      required: true
      type: string
    - name: auth_timestamp
      in: query
      required: true
      description: |
        The number of seconds since January 1, 1970 00:00:00 GMT. The server
        will only accept requests where the timestamp is within 600s of the
        current time.
      type: integer
    - name: auth_version
      in: query
      required: true
      description: Authentication version, currently "1.0".
      type: string
    - name: body_md5
      in: query
      required: false
      description: |
        If the request body is nonempty, this parameter must contain the
        hexadecimal MD5 hash of the body.
      type: string
    - name: auth_signature
      in: query
      description: Generated auth signature
      required: true
      type: string

################################################################################
#                                   Paths                                      #
################################################################################

paths:
  /apps/{app_id}/events:
    parameters: *CommonParams
    post:
      summary: Trigger an event
      description: |
        Publishes an event to 1-N channels.
      operationId: triggerEvent
      parameters:
        - name: event
          in: body
          description: Event to publish
          required: true
          schema:
            $ref: '#/definitions/TriggerEvent'
      responses:
        200:
          description: An empty JSON object
          schema:
            type: object
        400:
          description: Bad request - Client error, details in the body
        401:
          description: Unauthorized - Authentication error
        403:
          description: Forbidden - App disabled or over quota
        413:
          description: Request entity too large - Event message over 10k
        500:
          description: Internal server error - Something bad happened
        503:
          description: Service unavailable - Pusher is down !

  /apps/{app_id}/batch_events:
    parameters: *CommonParams
    post:
      summary: Trigger multiple events
      description: |
        Publishes multiple events at the same time.
      operationId: triggerBatchEvent
      parameters:
        - name: events
          in: body
          description: Events to publish
          required: true
          schema:
            $ref: '#/definitions/EventsBatch'
      responses:
        200:
          description: An empty JSON object
          schema:
            type: object
        400:
          description: Bad request - Client error, details in the body
        401:
          description: Unauthorized - Authentication error
        403:
          description: Forbidden - App disabled or over quota
        413:
          description: Request entity too large - Event message over 10k
        500:
          description: Internal server error - Something bad happened
        503:
          description: Service unavailable - Pusher is down !



  /apps/{app_id}/channels:
    parameters: *CommonParams
    get:
      summary: Info for multiple channels
      description: |
        Allows fetching a hash of occupied channels (optionally filtered by
        prefix), and optionally one or more attributes for each channel.
      operationId: getChannelsInfo
      parameters:
        - name: filter_by_prefix
          description: |
            Filter the returned channels by a specific prefix. For example in
            order to return only presence channels you would set
            filter_by_prefix=presence-.
          in: query
          type: string
        - name: info
          description: |
            A comma separated list of attributes which should be returned for
            each channel. If this parameter is missing, an empty hash of
            attributes will be returned for each channel.

            Only *user_count* is a valid value.
          in: query
          type: string
      responses:
        200:
          description: Info about the requestes channels
          schema:
            $ref: '#/definitions/Channels'
        400:
          description: Bad request - Client error, details in the body
        401:
          description: Unauthorized - Authentication error
        403:
          description: Forbidden - App disabled or over quota
        500:
          description: Internal server error - Something bad happened
        503:
          description: Service unavailable - Pusher is down !

  /apps/{app_id}/channels/{channel_name}:
    parameters: *CommonParams
    get:
      summary: Info for one channel
      description: |
        Fetch one or some attributes for a given channel.
      operationId: getChannelInfo
      parameters:
        - name: channel_name
          description: Name of the channel to query
          required: true
          type: string
          in: path
        - name: info
          description: |
            A comma separated list of attributes which should be returned for the channel. TODO
          in: query
          type: string
      responses:
        200:
          description: Channel info
          schema:
            $ref: '#/definitions/ChannelInfo'
        400:
          description: Bad request - Client error, details in the body
        401:
          description: Unauthorized - Authentication error
        403:
          description: Forbidden - App disabled or over quota
        500:
          description: Internal server error - Something bad happened
        503:
          description: Service unavailable - Pusher is down !

  /apps/{app_id}/channels/{channel_name}/users:
    parameters: *CommonParams
    get:
      summary: User data
      description: |
        Fetch user ids currently subscribed to a presence channel. This
        functionality is primarily aimed to complement presence webhooks, by
        allowing the initial state of a channel to be fetched.
        
        Note that only presence channels allow this functionality, and a
        request to any other kind of channel will result in a 400 HTTP code.
      parameters:
        - name: channel_name
          in: path
          type: string
          required: true
          description: Channel name
      responses:
        200:
          description: User infos
          schema:
            $ref: '#/definitions/UserList'
        400:
          description: Bad request - Client error, details in the body
        401:
          description: Unauthorized - Authentication error
        403:
          description: Forbidden - App disabled or over quota
        default:
          description: Unexpected error

definitions:
  TriggerEvent:
    type: object
    properties:
      name:
        type: string
        description: Name of the event
        minLength: 1
        maxLength: 255
        pattern: /^[^:]$/
      channel:
        type: string
        description: Name of the channel to publish to
        minLength: 1
        maxLength: 255
        #pattern: /^TODO$/
      channels:
        type: array
        items:
          type: string
          description: Name of the channel to publish to
          minLength: 1
          maxLength: 255
      data:
        type: string
        description: Payload of the event
        maxLength: 10000
      socket_id:
        type: string
        description: When set, don't sent the event that specific socket
        pattern: /^\d+\.\d+$/
    required:
      - name
      - data
      
  EventsBatch:
    type: object
    properties:
      batch:
        type: array
        items:
          $ref: '#/definitions/Event'

  Event:
    type: object
    properties:
      name:
        type: string
        description: Name of the event
        minLength: 1
        maxLength: 255
        pattern: /^[^:]$/
      channel:
        type: string
        description: Name of the channel to publish to
        minLength: 1
        maxLength: 255
        #pattern: /^TODO$/
      data:
        type: string
        description: Payload of the event
        maxLength: 10000
      socket_id:
        type: string
        description: When set, don't sent the event that specific socket
        pattern: /^\d+\.\d+$/
    required:
      - name
      - channel
      - data
  
  Channels:
    type: object
    required:
      - channels
    properties:
      channels:
        type: object
        description: A map between channel names and channel information
        additionalProperties:
          $ref: '#/definitions/ChannelInfo'
        # PatternProperies are not supported
        #patternProperties:
        #  ".*":
        #    $ref: '#/definitions/ChannelInfo'
  ChannelInfo:
    type: object
    properties:
      occupied:
        type: boolean
        description: |
          true when one or more clients are subscribed to this channel
      user_count:
        type: integer
        minimum: 0
        description: |
          Number of distinct users currently subscribed to this channel
          (a single user may be subscribed many times, but will only count
          as one). Only for presence channels.
      subscription_count:
        type: integer
        minimum: 0
        description: |
          Number of connections currently subscribed to this channel.
          This attribute is not available by default; please contact
          support@pusher.com if you would like to enable this feature.

  UserList:
    type: object
    properties:
      users:
        type: array
        items:
          $ref: '#/definitions/UserInfo'

  UserInfo:
    type: object
    required:
      - id
    properties:
      id:
        type:
        - integer
        - string

